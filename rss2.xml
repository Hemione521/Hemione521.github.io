<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hemione的博客</title>
    <link>Hemione.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>一只特立独行的猪</description>
    <pubDate>Wed, 14 Mar 2018 11:57:52 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Android拖动条(SeekBar)简单源码剖析</title>
      <link>Hemione.github.io/2018/03/13/Android%E6%8B%96%E5%8A%A8%E6%9D%A1(SeekBar)%E7%AE%80%E5%8D%95%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <guid>Hemione.github.io/2018/03/13/Android%E6%8B%96%E5%8A%A8%E6%9D%A1(SeekBar)%E7%AE%80%E5%8D%95%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <pubDate>Tue, 13 Mar 2018 14:18:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;写在开始之前&quot;&gt;&lt;a href=&quot;#写在开始之前&quot; class=&quot;headerlink&quot; title=&quot;写在开始之前&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;font color=&quot;grey&quot;&gt;&lt;strong&gt;写在开始之前&lt;/strong&gt;&lt;/font&gt;&lt;/center&gt;&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="写在开始之前"><a href="#写在开始之前" class="headerlink" title="写在开始之前"></a><center><font color="grey"><strong>写在开始之前</strong></font></center></h3><blockquote><p>在Android的色彩处理中，我们通常用三个角度来描述一个图像：</p><ul><li><p>色调： 图像的颜色</p></li><li><p>饱和度：颜色的纯度，从0(灰)到100%(饱和)来进行描述</p></li><li><p>亮度：颜色的相对明暗程度  </p><p>在上面三个属性中，饱和度和亮度为0会使得图片看起来是纯黑色。(记住这一点)</p><p>本篇源码分析的原因就是来自这个问题。</p></li></ul></blockquote><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a><center><font color="grey">正文</font></center></h3><blockquote><p>在Android开发的过程中，大家有可能都使用过SeekBar这个控件，比如拖动视频进度条、音频进度条等。不管大家用的多还是少，由于工作原因，个人用到的还是比较少的。然后最近在看书的时候，书中为了直观的展示颜色矩阵(ColorMatrix)的变换，有一段代码是通过SeekBar拖动来实时修改图像。</p></blockquote><p>demo的样式就是下图展示的这样：</p><div align="center"><br><br><img src="https://upload-images.jianshu.io/upload_images/2508513-3ca3d8003d09743e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="b90d4ee5-5a66-49be-a343-19a3bbf8db62.png"><br><br></div><p>然后这段代码也很简单，</p><ul><li>实现一个<code>OnSeekBarChangeListener</code>接口;</li><li>给<code>SeekBar</code>设置<code>setOnSeekBarChangeListener()</code>的监听;</li><li>重写<code>onProgressChanged(SeekBar seekBar, int progress, boolean fromUser)</code>方法即可。<br>事实上，我们实际开发过程中也是这样处理的。<br>  那么看下面代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> mHue, mSaturation, mLum;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.app_activity_layout_color_matrix);</div><div class="line">    ...</div><div class="line">    <span class="comment">//省略初始化控件代码</span></div><div class="line">    ...</div><div class="line">    initSeekBarProperty();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 初始化进度条属性</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSeekBarProperty</span><span class="params">()</span> </span>&#123;</div><div class="line">    mSeekbarHue.setProgress(MID_VALUE);</div><div class="line">    mSeekbarSaturation.setProgress(MID_VALUE);</div><div class="line">    mSeekbarScale.setProgress(MID_VALUE);</div><div class="line">    mSeekbarHue.setOnSeekBarChangeListener(<span class="keyword">this</span>);</div><div class="line">    mSeekbarSaturation.setOnSeekBarChangeListener(<span class="keyword">this</span>);</div><div class="line">    mSeekbarScale.setOnSeekBarChangeListener(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> progress, <span class="keyword">boolean</span> fromUser)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (seekBar == mSeekbarHue) &#123; <span class="comment">//调整色调，色调范围在-180~180之间一个周期</span></div><div class="line">        mHue = (progress - MID_VALUE) * <span class="number">1.0f</span> / MID_VALUE * <span class="number">180</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (seekBar == mSeekbarSaturation) &#123; <span class="comment">//调整饱和度</span></div><div class="line">        mSaturation = progress * <span class="number">1.0f</span> / MID_VALUE;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (seekBar == mSeekbarScale) &#123; <span class="comment">//调整亮度</span></div><div class="line">        mLum = progress * <span class="number">1.0f</span> / MID_VALUE;</div><div class="line">    &#125;</div><div class="line">    mImageMatrix.setImageBitmap(handleImageMatrix(bitmap, mHue, mSaturation, mLum));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<code>initSeekBarProperty()</code>方法中为Seekbar设置当前要显示的进度，并且设置进度条改变的监听。<br>然后运行Demo,只拖动控制色调的Seekbar，是不是以为大功告成了？我发现此时图片变成了黑色。</p><p>想到我们在上面的拓展，当饱和度和亮度为0时，图片是会变成黑色背景。那么我们调试一下代码，来验证下是不是这样，调试代码如图：</p><div align="center"><img src="https://upload-images.jianshu.io/upload_images/2508513-4e16fd7366b33a01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></div><p>调试验证了我们的猜想。</p><p>从网上搜索答案，解决方案是：</p><blockquote><p>将<code>setOnSeekBarChangeListener()</code>监听放在<code>setProgress()</code>之前</p></blockquote><p>然后将设置监听和设置进度的顺序调换了一下，果真没有问题了。</p><h3 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a><center><font color="grey"><strong>源码部分</strong></font></center></h3><p>那么真正的原因是什么呢？我们从源码的角度来简单剖析一下这个问题。<br>首先说一下Seekbar的继承关系:</p><div align="center"><img src="https://upload-images.jianshu.io/upload_images/2508513-db02c2ce26ba436c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1520946720232.png"></div><p>首先看一下监听回调的方法：<br><code>void onProgressRefresh(float scale, boolean fromUser, int progress)</code><br>进入SeekBar的源码，可以看到<code>onProgressRefresh()</code>方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onProgressRefresh</span><span class="params">(<span class="keyword">float</span> scale, <span class="keyword">boolean</span> fromUser, <span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onProgressRefresh(scale, fromUser, progress);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mOnSeekBarChangeListener != <span class="keyword">null</span>) &#123;</div><div class="line">            mOnSeekBarChangeListener.onProgressChanged(<span class="keyword">this</span>, progress, fromUser);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p><code>SeekBar</code>的<code>onProgressRefresh()</code>方法里面是先执行了父类的<code>onProgressRefresh()</code>方法，先看<code>AbsSeekBar</code>，在<code>AbsSeekBar</code>中是没有<code>onProgressRefresh()</code>方法的，说明<code>SeekBar</code>执行的是<code>ProgresssBar</code>中的<code>onProgressRefresh()</code>方法，<br>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onProgressRefresh</span><span class="params">(<span class="keyword">float</span> scale, <span class="keyword">boolean</span> fromUser, <span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (AccessibilityManager.getInstance(mContext).isEnabled()) &#123;</div><div class="line">            scheduleAccessibilityEventSender();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>看一下，哪些地方调用了这个方法，发现只有在<code>doRefreshProgress()</code>方法中被调用，看一下这个方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doRefreshProgress</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> progress, <span class="keyword">boolean</span> fromUser,</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> callBackToApp, <span class="keyword">boolean</span> animate)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        省略部分源码</div><div class="line">        ...</div><div class="line">        <span class="keyword">if</span> (isPrimary &amp;&amp; callBackToApp) &#123;</div><div class="line">            onProgressRefresh(scale, fromUser, progress);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>可以看到在这个方法中，fromUser这个参数也是传过来的，看一下哪些地方调用了该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">refreshProgress</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> progress, <span class="keyword">boolean</span> fromUser,</span></span></div><div class="line"><span class="function"><span class="params">            <span class="keyword">boolean</span> animate)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mUiThreadId == Thread.currentThread().getId()) &#123;</div><div class="line">            doRefreshProgress(id, progress, fromUser, <span class="keyword">true</span>, animate);</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">        省略部分源码</div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>再查看该方法被调用的地方，可以看到有这个一个方法调用了该方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@android</span>.view.RemotableViewMethod</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">setProgressInternal</span><span class="params">(<span class="keyword">int</span> progress, <span class="keyword">boolean</span> fromUser, <span class="keyword">boolean</span> animate)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mIndeterminate) &#123;</div><div class="line">            <span class="comment">// Not applicable.</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        progress = MathUtils.constrain(progress, <span class="number">0</span>, mMax);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (progress == mProgress) &#123;</div><div class="line">            <span class="comment">// No change from current.</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mProgress = progress;</div><div class="line">        refreshProgress(R.id.progress, mProgress, fromUser, animate);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>原来是在<code>setProgressInternal()</code>这里被调用的，看方法名字就知道，意思是内部设置进度值，我们再看看这个方法是在哪里被调用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Sets the current progress to the specified value. Does not do anything</span></div><div class="line"><span class="comment">     * if the progress bar is in indeterminate mode.</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * This method will immediately update the visual position of the progress</span></div><div class="line"><span class="comment">     * indicator. To animate the visual position to the target value, use</span></div><div class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #setProgress(int, boolean)&#125;&#125;.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> progress the new progress, between 0 and &#123;<span class="doctag">@link</span> #getMax()&#125;</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span> #setIndeterminate(boolean)</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span> #isIndeterminate()</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span> #getProgress()</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span> #incrementProgressBy(int)</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@android</span>.view.RemotableViewMethod</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setProgress</span><span class="params">(<span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">        setProgressInternal(progress, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>看到这里，终于看到了一个熟悉的方法，这个<code>setProgress()</code>就是我们在初始化的时候给<code>seekbar</code>设置当前进度的方法，这个方法实际上就调用了<code>setProgressInternal()</code>方法。第二个<code>fromUser</code>参数就是通过这个方法一层层分发下去。然后看到这个值为false，你会不会有点想法：什么时候这个值为true呢？<br>答案就是当我们拖动seekbar的时候。<br>一提到拖动，你是不是想到了<code>onTouchEvent()</code>事件分发？我们来看一下源码，发现只有在AbsSeekBar中重写了<code>onTouchEvent()</code>方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!mIsUserSeekable || !isEnabled()) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">               <span class="keyword">if</span> (isInScrollingContainer()) &#123;</div><div class="line">                   mTouchDownX = event.getX();</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   startDrag(event);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line"></div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">               <span class="keyword">if</span> (mIsDragging) &#123;</div><div class="line">                   trackTouchEvent(event);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="keyword">final</span> <span class="keyword">float</span> x = event.getX();</div><div class="line">                   <span class="keyword">if</span> (Math.abs(x - mTouchDownX) &gt; mScaledTouchSlop) &#123;</div><div class="line">                       startDrag(event);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line"></div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">               <span class="keyword">if</span> (mIsDragging) &#123;</div><div class="line">                   trackTouchEvent(event);</div><div class="line">                   onStopTrackingTouch();</div><div class="line">                   setPressed(<span class="keyword">false</span>);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="comment">// Touch up when we never crossed the touch slop threshold should</span></div><div class="line">                   <span class="comment">// be interpreted as a tap-seek to that location.</span></div><div class="line">                   onStartTrackingTouch();</div><div class="line">                   trackTouchEvent(event);</div><div class="line">                   onStopTrackingTouch();</div><div class="line">               &#125;</div><div class="line">               <span class="comment">// ProgressBar doesn't know to repaint the thumb drawable</span></div><div class="line">               <span class="comment">// in its inactive state when the touch stops (because the</span></div><div class="line">               <span class="comment">// value has not apparently changed)</span></div><div class="line">               invalidate();</div><div class="line">               <span class="keyword">break</span>;</div><div class="line"></div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">               <span class="keyword">if</span> (mIsDragging) &#123;</div><div class="line">                   onStopTrackingTouch();</div><div class="line">                   setPressed(<span class="keyword">false</span>);</div><div class="line">               &#125;</div><div class="line">               invalidate(); <span class="comment">// see above explanation</span></div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>这里注意两个方法，<code>startDrag()</code>和<code>trackTouchEvent()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startDrag</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        setPressed(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mThumb != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// This may be within the padding region.</span></div><div class="line">            invalidate(mThumb.getBounds());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        onStartTrackingTouch();</div><div class="line">        trackTouchEvent(event);</div><div class="line">        attemptClaimDrag();</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trackTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       ...</div><div class="line">       省略部分源码</div><div class="line">       ...</div><div class="line">        setHotspot(x, y);</div><div class="line">        setProgressInternal(Math.round(progress), <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>我们发现在<code>startDrag()</code>中也调用了<code>trackTouchEvent()</code>方法，然后可以看到在<code>trackTouchEvent()</code>最后是调用了<code>setProgressInternal()</code>方法去设置<code>seekbar</code>的进度值，并且，这个方法的第二个参数传值为true。<br>到这里我们基本上就能明白：</p><ul><li>当我们通过<code>setProgress()</code>设置进度时，这个时候<code>fromUser</code>传值为false；</li><li>当我们拖动<code>seekbar</code>时，<code>fromUser</code>传值为true；<br>那么回到我们最开始的问题，为什么需要先设置监听呢? 答案在<code>SeekBar</code>的<code>onProgressChanged()</code>方法中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mOnSeekBarChangeListener != <span class="keyword">null</span>) &#123;</div><div class="line">            mOnSeekBarChangeListener.onProgressChanged(<span class="keyword">this</span>, progress, fromUser);</div><div class="line">        &#125;</div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><center><font color="grey">总结</font></center></h3><blockquote><ul><li>当我们先通过<code>setProgress()</code>设置进度时，此时回调到<code>onProgressChanged()</code>方法时，由于<code>mOnSeekBarChangeListener == null</code>, 所以不会去执行我们重写的<code>onProgressChange()</code>方法,自然也就不会去改变色调、饱和度和亮度这几个的值，由于在初始化的时候，这三个值默认为0.f，然后当饱和度和亮度为0的时候，图片会变成黑色。</li><li>如果我们先设置监听，再去通过<code>setProgress()</code>设置进度，此时由于<code>mOnSeekBarChangeListener ！= null</code>就可以回调到<code>onProgressChanged()</code>方法中修改三个变量的值。</li></ul></blockquote><p>​    </p><hr>]]></content:encoded>
      
      <comments>Hemione.github.io/2018/03/13/Android%E6%8B%96%E5%8A%A8%E6%9D%A1(SeekBar)%E7%AE%80%E5%8D%95%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android完美解决ListView复用导致的Checkbox状态混乱问题</title>
      <link>Hemione.github.io/2017/09/09/Android%E8%A7%A3%E5%86%B3Checkbox%E5%A4%8D%E7%94%A8%E9%97%AE%E9%A2%98/</link>
      <guid>Hemione.github.io/2017/09/09/Android%E8%A7%A3%E5%86%B3Checkbox%E5%A4%8D%E7%94%A8%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Sat, 09 Sep 2017 11:58:10 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;在Android开发中，ListView、RecyclerView和GridView控件是实现列表布局的不可或缺的工具，我觉得暂且可以这么说。比如QQ好友列表等，我们不可能用循环的方式去实现，这样对应用的性能也是有很大影响的。所以，为了记录之前遇到
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>在Android开发中，ListView、RecyclerView和GridView控件是实现列表布局的不可或缺的工具，我觉得暂且可以这么说。比如QQ好友列表等，我们不可能用循环的方式去实现，这样对应用的性能也是有很大影响的。所以，为了记录之前遇到的这个问题，也顺便给其他需要解决这个问题的童鞋看一下，写了这篇文章（大神勿喷）！</p></blockquote><p>当然，如果你的布局比较简单，你说我没必要复用，那么你看到这里可以return了….</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2508513-d98488e89fb876f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="傲娇.jpg"></div><p>如果想用但是不知道怎么用的呢(基本不存在吧)，可以参考下之前刚接触Android时写的一篇博客——<a href="http://blog.csdn.net/lr809174917/article/details/50949392" target="_blank" rel="external">Android ListView的复用优化</a></p><p>那么言归正传，如果你搜到这篇文章，那么你遇到的问题应该是下面这样的：</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2508513-83067cdb2d083135.gif?imageMogr2/auto-orient/strip" alt="error.gif"></div><p>我们实现CheckBox的选中效果一般有两种：</p><ul><li><p>设置CheckBox的 setOnClickListener() 监听</p></li><li><p>设置CheckBox的 setOnCheckedChangeListener() 监听</p><p>下面针对这两种实现，提出两种解决方案：</p><h5 id="1-通过setOnClickListener-监听实现"><a href="#1-通过setOnClickListener-监听实现" class="headerlink" title="1. 通过setOnClickListener()监听实现"></a>1. 通过setOnClickListener()监听实现</h5><p>传递给适配器的数据的实体类中添加一个是否选中的自选，比如我demo中这个，除了文本信息和图片信息外，我增加一个hasChecked属性来标记该item是否被选中，实体类信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> String description; <span class="comment">//文字描述</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> resId; <span class="comment">//图片id</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> hasChecked; <span class="comment">//是否选中</span></div></pre></td></tr></table></figure><p>然后我们在Listview的Adapter适配器中去实现监听效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mCheckBox.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">// checkbox控件的方法，判断控件是否选中</span></div><div class="line">                <span class="keyword">if</span>(mCheckBox.isChecked())&#123;</div><div class="line">                    <span class="comment">//自己在实体类中实现的方法 对属性就行赋值 标记是否选中</span></div><div class="line">                    mData.get(position).setHasChecked(<span class="keyword">true</span>);</div><div class="line">                    <span class="comment">//计数 为了便于观察 与此问题解决无关</span></div><div class="line">                    selectCount++;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    mData.get(position).setHasChecked(<span class="keyword">true</span>);</div><div class="line">                    selectCount--;</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>看到这里，你估计要说，我也是这么写的啊，为什么我的不行呢？莫慌，仔细考虑一下，之所以发生混乱是因为没有对每个item的Checkbox赋初始值，导致布局控件复用的时候，还是会使用复用到的控件的值。<br>所以，我们只需要在设置setOnClickListener() 监听之前，为item的checkbox赋一个初始值即可解决该问题。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">mCheckBox</span><span class="selector-class">.setChecked</span>(<span class="selector-tag">mData</span><span class="selector-class">.get</span>(<span class="selector-tag">position</span>)<span class="selector-class">.isHasChecked</span>());</div></pre></td></tr></table></figure><h5 id="2-通过setOnCheckedChangeListener-监听实现"><a href="#2-通过setOnCheckedChangeListener-监听实现" class="headerlink" title="2. 通过setOnCheckedChangeListener()监听实现"></a>2. 通过setOnCheckedChangeListener()监听实现</h5><p>使用该方法实现和通过方法1实现有一个共同点就是都需要给item赋一个初始值，但是不一样的地方是，如果你debug代码你可以发现，滚动的时候，你不需要点击checkbox它就会自动调用onCheckChanged()方法，然后去执行里面的逻辑，问题依旧没有解决！</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2508513-c7c4cc9e8f204b17.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="那你在这里说个毛线噻.jpg"></div><p>这时候，我们只需要在设置初始值之前给checkbox取消setOnCheckedChangeListener()监听就可以解决这个问题！</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mCheckBox.setOnCheckedChangeListener(null);</div><div class="line">mCheckBox.setChecked(mData.<span class="built_in">get</span>(<span class="built_in">position</span>).isHasChecked());</div><div class="line">mCheckBox.setOnCheckedChangeListener(<span class="keyword">new</span> CompoundButton.OnCheckedChangeListener() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> onCheckedChanged(CompoundButton buttonView, <span class="keyword">boolean</span> isChecked) &#123;</div><div class="line">                <span class="built_in">if</span>(isChecked)&#123;</div><div class="line">                    mData.<span class="built_in">get</span>(<span class="built_in">position</span>).setHasChecked(true);</div><div class="line">                    selectCount++;</div><div class="line">                &#125;<span class="built_in">else</span> &#123;</div><div class="line">                    mData.<span class="built_in">get</span>(<span class="built_in">position</span>).setHasChecked(false);</div><div class="line">                    selectCount--;</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>然后可以看一下效果就是这样式滴：</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2508513-15d10ce5a7a02de2.gif?imageMogr2/auto-orient/strip" alt="normal.gif"></div><p>好了，到这里两种方法就讲完了，聪明的你是不是觉得炒鸡简单呢？<br>如果对你有用的话，可以点个喜欢哦，谢谢（手动比心）</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2508513-4ded940dd9ccf828.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ图片20170813200511.jpg"></div><p>如果你有其他的方法欢迎同我这只菜鸟交流哦！</p></li></ul>]]></content:encoded>
      
      <comments>Hemione.github.io/2017/09/09/Android%E8%A7%A3%E5%86%B3Checkbox%E5%A4%8D%E7%94%A8%E9%97%AE%E9%A2%98/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
